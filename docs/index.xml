<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>TheCodingSide.Quest</title>
        <link>https://thecodingside.quest</link>
        <description>Recent content on TheCodingSide.Quest</description>
        <generator>Flask Static Site Generator written by David Carmichael.</generator>
        <language>en-gb</language>
        <lastBuildDate>Thu, 24 Aug 2023 10:32:58 +0100</lastBuildDate>
        <atom:link href="https://thecodingside.quest/index.xml" rel="self" type="application/rss+xml"/>
        <item>
            <title>SQLAlchemy queries to JSONable friendly dicts</title>
            <link>https://thecodingside.quest/2023-08-24_sqlalchemy-queries-to-jsonable-friendly-dicts.html</link>
            <pubDate>Thu, 24 Aug 2023 10:24:53 +0100</pubDate>
            <guid>https://thecodingside.quest/2023-08-24_sqlalchemy-queries-to-jsonable-friendly-dicts.html</guid>
            <description>
                <![CDATA[Exploring methods of converting SQLAlchemy queries to JSONable dicts because I&#39;m lazy. <br/><a href='https://thecodingside.quest/2023-08-24_sqlalchemy-queries-to-jsonable-friendly-dicts.html' target='_blank'>View Post</a>]]>
            </description>
            <content:encoded>
                <![CDATA[<p>Having trouble viewing the content below? <a href="https://thecodingside.quest/2023-08-24_sqlalchemy-queries-to-jsonable-friendly-dicts.html">View original post here</a></p><p>As of Flask 1.1, I believe; you have been able to simply return a
dict from a route, which will be converted to a JSON response.</p>
<p>Here's an example:</p>
<pre><code>@app.route('/api')<br/>def&nbsp;api():<br/>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;{'hello':&nbsp;'world'}<br/></code></pre><p>Simple, right? But what if you want to return a query from a database?</p>
<pre><code>@app.route('/api')<br/>def&nbsp;api():<br/>&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;app.models.whatever&nbsp;import&nbsp;Whatever<br/>&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;app&nbsp;import&nbsp;db<br/>&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;=&nbsp;db.session.execute(<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;db.select(Whatever).filter_by(Whatever.thing_id&nbsp;==&nbsp;1)<br/>&nbsp;&nbsp;&nbsp;&nbsp;).scalars().all()<br/>&nbsp;&nbsp;&nbsp;&nbsp;data&nbsp;=&nbsp;{}<br/>&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;item&nbsp;in&nbsp;result:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data[item.id]&nbsp;=&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'name':&nbsp;item.name,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'description':&nbsp;item.description,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'created_at':&nbsp;item.created_at,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'updated_at':&nbsp;item.updated_at<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;data<br/></code></pre><p>This is probably the first thing you would try, and it works, until you hit
maybe a datetime object, or another value that won't serialize to JSON. Obviously
you would be mindful of this and convert the values to something JSON friendly.</p>
<p>I'll admit that the above example is an over simplification, but it's common to
see this method in routes.</p>
<p>Personally, I prefer to keep all query-like logic in the models.</p>
<pre><code>#&nbsp;app/models/whatever.py<br/><br/>from&nbsp;app&nbsp;import&nbsp;db<br/><br/>class&nbsp;Whatever(db.Model):<br/>&nbsp;&nbsp;&nbsp;&nbsp;thing_id&nbsp;=&nbsp;db.Column(...)<br/>&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;=&nbsp;db.Column(...)<br/>&nbsp;&nbsp;&nbsp;&nbsp;description&nbsp;=&nbsp;db.Column(...)<br/>&nbsp;&nbsp;&nbsp;&nbsp;created_at&nbsp;=&nbsp;db.Column(...)<br/>&nbsp;&nbsp;&nbsp;&nbsp;updated_at&nbsp;=&nbsp;db.Column(...)<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;@classmethod<br/>&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;get_by_id(cls,&nbsp;thing_id):<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;db.select(<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whatever<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;).filter_by(<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whatever.thing_id&nbsp;==&nbsp;1<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;).scalars().all()<br/><br/></code></pre><p>Would then allow for:</p>
<pre><code>@app.route('/api')<br/>def&nbsp;api():<br/>&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;app.models.whatever&nbsp;import&nbsp;Whatever<br/>&nbsp;&nbsp;&nbsp;&nbsp;data&nbsp;=&nbsp;{}<br/>&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;item&nbsp;in&nbsp;Whatever.get_by_id(1):<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data[item.id]&nbsp;=&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'name':&nbsp;item.name,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'description':&nbsp;item.description,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'created_at':&nbsp;item.created_at,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'updated_at':&nbsp;item.updated_at<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;data<br/></code></pre><p>A little cleaner, but you are still having to define
values in the return data. <code>item.name</code>, <code>item.description</code>, Etc...</p>
<p>It is said, whether true or not, that the lazy programmer is the best programmer.
I'm not sure if this should be a method of thought to live by; But it does promote
DRY code, and I don't want to keep defining columns in the return data if I don't have to.</p>
<p>So my solution was a mixin class that has two methods. <code>as_jsonable_dict</code> and <code>as_json</code></p>
<pre><code>import&nbsp;json<br/>import&nbsp;typing&nbsp;as&nbsp;t<br/>from&nbsp;datetime&nbsp;import&nbsp;datetime<br/><br/>from&nbsp;sqlalchemy&nbsp;import&nbsp;Result<br/>from&nbsp;sqlalchemy.orm.collections&nbsp;import&nbsp;InstrumentedList<br/>from&nbsp;sqlalchemy.engine&nbsp;import&nbsp;Row<br/><br/><br/>class&nbsp;JSONMixin:<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;@classmethod<br/>&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;as_jsonable_dict(<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cls,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;execute:&nbsp;Result,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;include_joins:&nbsp;list&nbsp;=&nbsp;None,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;all_columns_but:&nbsp;list&nbsp;=&nbsp;None,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;only_columns:&nbsp;list&nbsp;=&nbsp;None,<br/>&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;-&gt;&nbsp;t.Dict[str,&nbsp;t.List[t.Dict[str,&nbsp;t.Any]&nbsp;|&nbsp;None]]:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;&quot;&quot;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Expects:&nbsp;execute&nbsp;=&nbsp;db.session.execute(query)<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;execute&nbsp;is&nbsp;run&nbsp;with&nbsp;.scalars()&nbsp;and&nbsp;.all()&nbsp;to&nbsp;get&nbsp;the&nbsp;results<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;execute.scalars().all()<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;&quot;&quot;<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;include_joins&nbsp;is&nbsp;None:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;include_joins&nbsp;=&nbsp;[]<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;all_columns_but&nbsp;is&nbsp;None:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;all_columns_but&nbsp;=&nbsp;[]<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;only_columns&nbsp;is&nbsp;None:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;only_columns&nbsp;=&nbsp;[]<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;include_column(column):<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;only_columns:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;column&nbsp;not&nbsp;in&nbsp;only_columns:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;False<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;all_columns_but:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;column&nbsp;in&nbsp;all_columns_but:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;False<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;True<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;as_dict(row:&nbsp;Row)&nbsp;-&gt;&nbsp;dict:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;{key:&nbsp;row.__dict__[key]&nbsp;for&nbsp;key&nbsp;in&nbsp;row.__dict__&nbsp;if&nbsp;key[0]&nbsp;!=&nbsp;'_'}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;parse_value(value):<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;isinstance(value,&nbsp;datetime):<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;value.strftime(&quot;%Y-%m-%d&nbsp;%H:%M:%S&quot;)<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;isinstance(value,&nbsp;int)&nbsp;or&nbsp;isinstance(value,&nbsp;bool)&nbsp;or&nbsp;isinstance(value,&nbsp;str):<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;value<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;isinstance(value,&nbsp;t.Iterable):<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;isinstance(value,&nbsp;dict):<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;{key:&nbsp;parse_value(x)&nbsp;for&nbsp;key,&nbsp;x&nbsp;in&nbsp;value.items()}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;[parse_value(x)&nbsp;for&nbsp;x&nbsp;in&nbsp;value]<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;f&quot;{value}&quot;<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;parse_row(row:&nbsp;Row,&nbsp;_is_join:&nbsp;bool&nbsp;=&nbsp;False):<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data&nbsp;=&nbsp;dict()<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;column,&nbsp;value&nbsp;in&nbsp;as_dict(row).items():<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;not&nbsp;include_column(column):<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;isinstance(value,&nbsp;InstrumentedList):<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data[column]&nbsp;=&nbsp;parse_value(value)<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;_is_join:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;data<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;joins&nbsp;=&nbsp;dict()<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;join&nbsp;in&nbsp;include_joins:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;hasattr(row,&nbsp;join):<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;joins[join]&nbsp;=&nbsp;[parse_row(row,&nbsp;_is_join=True)&nbsp;for&nbsp;row&nbsp;in&nbsp;getattr(row,&nbsp;join)]&nbsp;or&nbsp;[]<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;data,&nbsp;joins<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;parse(query_row:&nbsp;Row):<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data,&nbsp;joins&nbsp;=&nbsp;parse_row(query_row)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;{**data,&nbsp;**joins}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;{cls.__name__:&nbsp;[parse(x)&nbsp;for&nbsp;x&nbsp;in&nbsp;execute.scalars().all()]}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;@classmethod<br/>&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;as_json(<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cls,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;execute:&nbsp;Result,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;include_joins:&nbsp;list&nbsp;=&nbsp;None,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;all_columns_but:&nbsp;list&nbsp;=&nbsp;None,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;only_columns:&nbsp;list&nbsp;=&nbsp;None,<br/>&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;-&gt;&nbsp;str&nbsp;|&nbsp;None:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;json.dumps(cls.as_jsonable_dict(<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;execute,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;include_joins=include_joins,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;all_columns_but=all_columns_but,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;only_columns=only_columns,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;))<br/></code></pre><p>The <code>as_jsonable_dict</code> method is the one that does the heavy lifting. It expects
a SQLAlchemy <code>Result</code> object, which is the result of <code>db.session.execute(query)</code>.</p>
<p>Here is an example of its usage in a classmethod:</p>
<pre><code>@classmethod<br/>def&nbsp;get_by_id(cls,&nbsp;thing_id)&nbsp;-&gt;&nbsp;dict:<br/>&nbsp;&nbsp;&nbsp;&nbsp;query&nbsp;=&nbsp;select(cls).filter_by(user_id=thing_id)<br/>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;cls.as_jsonable_dict(<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;db.session.execute(query)<br/>&nbsp;&nbsp;&nbsp;&nbsp;)<br/></code></pre><p>This will then return:</p>
<pre><code>{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&quot;Whatever&quot;:&nbsp;[<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{colmun:&nbsp;value,&nbsp;...},&nbsp;{colmun:&nbsp;value,&nbsp;...}<br/>&nbsp;&nbsp;&nbsp;&nbsp;]<br/>}<br/></code></pre><p>The <code>as_json</code> method is just a wrapper for <code>json.dumps</code> and <code>as_jsonable_dict</code>. It returns the same as
the above but uses the in-built json module to convert the dict to a JSON string.</p>
<p>A standalone example of this can be found in the following Gist
<a href="https://gist.github.com/CheeseCake87/20398198f2b388e27b396cdbb92cfe56">https://gist.github.com/CheeseCake87/20398198f2b388e27b396cdbb92cfe56</a></p>
<p>In the Gist it also gives an example of using this mixin with joins. The <code>include_joins</code> argument
takes a list of any relationship attributes that have been created.</p>
<p>I have included some arguments to deal with limiting the columns returned. <code>all_columns_but</code> and <code>only_columns</code></p>
<p><code>all_columns_but</code> will exclude any columns that are in the list. <code>only_columns</code>
will only include columns that are in the list. This effects the joins too!</p>
<p>The Gist uses the example models Users, Cars and Boats, and demonstrates how joins can be included.</p>
<pre><code>#&nbsp;relationships<br/>rel_cars&nbsp;=&nbsp;db.relationship(<br/>&nbsp;&nbsp;&nbsp;&nbsp;&quot;Cars&quot;,<br/>&nbsp;&nbsp;&nbsp;&nbsp;primaryjoin=&quot;Users.user_id&nbsp;==&nbsp;Cars.fk_user_id&quot;<br/>)<br/>rel_boats&nbsp;=&nbsp;db.relationship(<br/>&nbsp;&nbsp;&nbsp;&nbsp;&quot;Boats&quot;,<br/>&nbsp;&nbsp;&nbsp;&nbsp;primaryjoin=&quot;Users.user_id&nbsp;==&nbsp;Boats.fk_user_id&quot;<br/>)<br/><br/>@classmethod<br/>def&nbsp;get_by_id(cls,&nbsp;user_id):<br/>&nbsp;&nbsp;&nbsp;&nbsp;query&nbsp;=&nbsp;select(cls).filter_by(user_id=user_id)<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;cls.as_jsonable_dict(<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;db.session.execute(query),<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;include_joins=[&quot;rel_cars&quot;,&nbsp;&quot;rel_boats&quot;],<br/>&nbsp;&nbsp;&nbsp;&nbsp;)<br/></code></pre><p>Results in:</p>
<pre><code>{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&quot;Users&quot;:&nbsp;[<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;created&quot;:&nbsp;&quot;2023-08-24&nbsp;09:53:05&quot;,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;user_id&quot;:&nbsp;1,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;updated&quot;:&nbsp;&quot;None&quot;,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;username&quot;:&nbsp;&quot;user1&quot;,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;rel_cars&quot;:&nbsp;[<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;updated&quot;:&nbsp;&quot;None&quot;,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;make&quot;:&nbsp;&quot;Ford&quot;,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;created&quot;:&nbsp;&quot;2023-08-24&nbsp;09:53:05&quot;,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;car_id&quot;:&nbsp;1,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;fk_user_id&quot;:&nbsp;1<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;updated&quot;:&nbsp;&quot;None&quot;,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;make&quot;:&nbsp;&quot;Mazda&quot;,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;created&quot;:&nbsp;&quot;2023-08-24&nbsp;09:53:05&quot;,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;car_id&quot;:&nbsp;2,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;fk_user_id&quot;:&nbsp;1<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;],<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;rel_boats&quot;:&nbsp;[<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;fk_user_id&quot;:&nbsp;1,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;created&quot;:&nbsp;&quot;2023-08-24&nbsp;09:53:05&quot;,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;make&quot;:&nbsp;&quot;Big&quot;,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;boat_id&quot;:&nbsp;1,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;stats&quot;:&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;length&quot;:&nbsp;100<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;updated&quot;:&nbsp;&quot;None&quot;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;]<br/>}<br/></code></pre><p>Now our route can be as simple as:</p>
<pre><code>@app.route('/api')<br/>def&nbsp;api():<br/>&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;app.models.whatever&nbsp;import&nbsp;Whatever<br/>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;status&quot;:&nbsp;&quot;success&quot;,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**Whatever.get_by_id(1)<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/></code></pre><p>Which will return:</p>
<pre><code>{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&quot;status&quot;:&nbsp;&quot;success&quot;,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&quot;Whatever&quot;:&nbsp;[<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;thing_id&quot;:&nbsp;1,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;name&quot;:&nbsp;&quot;Thing&nbsp;1&quot;,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;description&quot;:&nbsp;&quot;This&nbsp;is&nbsp;thing&nbsp;1&quot;,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;created_at&quot;:&nbsp;&quot;2023-08-24&nbsp;09:53:05&quot;,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;updated_at&quot;:&nbsp;&quot;None&quot;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;]<br/>}<br/></code></pre><p>I've not used this in production yet, I suspect there will be some stumbling in doing so.
But the result so far is a much easier way to get JSON friendly data from a query.</p>
<p>https://github.com/jonbiemond helped me prune the code a little, cutting away some of the
unnecessary code, and making it a little more readable.</p>
<p>We also discussed the architecture of how to get dicts from a query. One of my earlier methods
chosen was to use the <code>_asdict</code> private method of the <code>Row</code> object. This returns a dict of the
row. However, this method is missing from rows that are the result of a join, so I had to take
a different approach.</p>
<p>The method used in the mixin is a little more verbose, in regard to including joins,
but it does allow for the inclusion of joins in a more explicit way, I suppose.</p>
<p>Hopefully this is useful to someone, and if you have any suggestions or improvements, please comment on the gist.</p>
<p>Thanks for reading.
BYEEEEEEEEEEEEEEEEEEEeeee.</p>
<p><em>SQLAlchemy queries to JSONable friendly dicts by David Carmichael</em></p>
]]>
            </content:encoded>
        </item>
        <item>
            <title>Making improvements to the Flask Static Site Generator</title>
            <link>https://thecodingside.quest/2023-08-11_making-improvements-to-the-flask-static-site-generator.html</link>
            <pubDate>Fri, 11 Aug 2023 20:37:22 +0100</pubDate>
            <guid>https://thecodingside.quest/2023-08-11_making-improvements-to-the-flask-static-site-generator.html</guid>
            <description>
                <![CDATA[In this post, I talk about the improvements I&#39;ve made to the Flask static site generator. <br/><a href='https://thecodingside.quest/2023-08-11_making-improvements-to-the-flask-static-site-generator.html' target='_blank'>View Post</a>]]>
            </description>
            <content:encoded>
                <![CDATA[<p>Having trouble viewing the content below? <a href="https://thecodingside.quest/2023-08-11_making-improvements-to-the-flask-static-site-generator.html">View original post here</a></p><p>If you haven't already seen the previous post about how I use Flask to statically generate this site, you
should check it out.</p>
<p>Here's a link: <a href="/2023-08-06_flask-as-a-static-site-generator.html">Flask as a Static Site Generator</a>.</p>
<p>First, let's start with the structure. I moved all the code to a package folder called <code>ssg</code>, making the code easier to
work with and maintain.</p>
<pre><code>└──&nbsp;ssg/<br/>&nbsp;&nbsp;&nbsp;&nbsp;├──&nbsp;__init__.py<br/>&nbsp;&nbsp;&nbsp;&nbsp;├──&nbsp;compiler.py<br/>&nbsp;&nbsp;&nbsp;&nbsp;├──&nbsp;exceptions.py<br/>&nbsp;&nbsp;&nbsp;&nbsp;├──&nbsp;helpers.py<br/>&nbsp;&nbsp;&nbsp;&nbsp;└──&nbsp;render_engines.py<br/></code></pre><p><code>compiler.py</code> is the main entry point to the static site generator. It's responsible for firing all the function calls
in the correct order. It's changed a lot from its original version.</p>
<p>I originally had the meta of a post set by its filename <code>date_title-of-post</code>, As you can imagine,
this was very limited.</p>
<p>I then moved to attempting to define some information about the post in the markdown file itself, at the
top. After throwing some hacky code at the process, I landed on the following:</p>
<pre><code>date=&quot;0000-00-00&nbsp;00:00:00&nbsp;+0100&quot;;<br/>title=&quot;title&quot;;<br/>description=&quot;description&quot;;<br/><br/>::::<br/><br/>Markdown&nbsp;here...<br/></code></pre><p>I was splitting the file on the <code>::::</code> marker, and using the first part to get the meta information, and the second
part to get the markdown content. Also using <code>;</code> and <code>&quot;</code> as split markers to get the individual meta information.</p>
<p>Although this method worked, I thought it looked very ugly. So I eventually changed it to:</p>
<pre><code>'''<br/>Publish&nbsp;=&nbsp;True<br/>date&nbsp;=&nbsp;2023-08-11&nbsp;20:37:22&nbsp;+0100<br/>Title&nbsp;=&nbsp;title<br/>Description&nbsp;=&nbsp;description<br/>'''<br/><br/>Markdown&nbsp;here...<br/></code></pre><p>This is much cleaner and easier to read, it also fits nicely into the way markdown works.
In the example above <code>'</code> are stand-ins for the <code>`</code> character used to denote code blocks in markdown.</p>
<p>So, at the top of the markdown file for the post, there is a neat little meta section,
done in a code block. Which looks nice, in my opinion.</p>
<p>With this change to the way meta is defined, I redesigned how the compiler function finds the meta information.</p>
<pre><code>publish_ptn&nbsp;=&nbsp;re.compile(r'Publish&nbsp;=(.*?)\n',&nbsp;re.IGNORECASE)<br/>date_ptn&nbsp;=&nbsp;re.compile(r'Date&nbsp;=(.*?)\n',&nbsp;re.IGNORECASE)<br/>title_ptn&nbsp;=&nbsp;re.compile(r'Title&nbsp;=(.*?)\n',&nbsp;re.IGNORECASE)<br/>description_ptn&nbsp;=&nbsp;re.compile(r'Description&nbsp;=(.*?)\n',&nbsp;re.IGNORECASE)<br/></code></pre><p>As you can see, I went for a regex solution. The file's text is split on the code block characters
<code>markdown.split(&quot;'''&quot;)</code> first. The index location of the meta section is pulled out and processed via the above regex,
and the rest is joined back together <code>&quot;'''&quot;.join(markdown_list[1:])</code> to get the markdown content.</p>
<p>This solution seems to work really well.</p>
<p>I cleaned up the rest of the code base, and I also changed to working more with datetimes, rather than dates as strings.</p>
<p>Here's a small list of the rest of the notable changes:</p>
<ul>
<li>A date that cannot be converted to a datetime object from the meta information is generated at publication time. This
also updates the file name and date within the original markdown file.</li>
<li>Addition of exception handling, if the meta section is not found, or incorrectly setup.</li>
</ul>
<p>No doubt there will be more changes to come, but for now, I'm happy with the way it's working. I only usually
tackle changes, as and when they are needed, and it seems to be working well. Maybe I'll build in unit tests at some
point, not sure if this is needed for such a small project.</p>
<p>I hope you enjoyed this short post, if you want to have a look at the code, you can find it on my GitHub:</p>
<p><a href="https://github.com/CheeseCake87/CheeseCake87">https://github.com/CheeseCake87/CheeseCake87</a></p>
<p>Most of the good stuff is in the <code>ssg</code> folder.</p>
<p>Thanks for reading!</p>
<p><em>Making improvements to the Flask static site generator by David Carmichael</em></p>
]]>
            </content:encoded>
        </item>
        <item>
            <title>I got carried away with using Python to commit my Obsidian vault to GitHub</title>
            <link>https://thecodingside.quest/2023-08-08_i-got-carried-away-with-using-python-to-commit-my-obsidian-vault-to-github.html</link>
            <pubDate>Tue, 08 Aug 2023 22:26:27 +0100</pubDate>
            <guid>https://thecodingside.quest/2023-08-08_i-got-carried-away-with-using-python-to-commit-my-obsidian-vault-to-github.html</guid>
            <description>
                <![CDATA[In a previous post, I came up with a solution to commit <br/><a href='https://thecodingside.quest/2023-08-08_i-got-carried-away-with-using-python-to-commit-my-obsidian-vault-to-github.html' target='_blank'>View Post</a>]]>
            </description>
            <content:encoded>
                <![CDATA[<p>Having trouble viewing the content below? <a href="https://thecodingside.quest/2023-08-08_i-got-carried-away-with-using-python-to-commit-my-obsidian-vault-to-github.html">View original post here</a></p><p>In the persuit to make my obsidian vault more portable, I came up with a solution to commit my vault to GitHub.</p>
<p>It was a fairly simple solution, two py files in the route of the vault that holds the code to commit the vault to
GitHub using subprocess. It got really annoying right-clicking a file, then clicking to open in system file explorer,
then right-clicking to open a terminal here, then typing <code>python3 git-push.py</code> to commit the vault.</p>
<p>A little convoluted, but it worked, I guess.</p>
<p>Anyway... I built an Obsidian plugin. It's called Gnome Terminal Loader, and it does just that, loads the Gnome
Terminal.</p>
<p>Here's the code:</p>
<pre><code>import&nbsp;{Platform,&nbsp;Plugin}&nbsp;from&nbsp;'obsidian';<br/>import&nbsp;{spawn}&nbsp;from&nbsp;&quot;child_process&quot;;<br/><br/>export&nbsp;default&nbsp;class&nbsp;GnomeTerminal&nbsp;extends&nbsp;Plugin&nbsp;{<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;async&nbsp;onload()&nbsp;{<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(Platform.isDesktopApp)&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;loadGnomeTerminal&nbsp;=&nbsp;this.addRibbonIcon(<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'terminal-square',&nbsp;'Gnome&nbsp;Terminal',&nbsp;(evt:&nbsp;MouseEvent)&nbsp;=&gt;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;{spawn}&nbsp;=&nbsp;require('child_process');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//@ts-ignore<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;openTerminalAtPath&nbsp;=&nbsp;spawn('gnome-terminal',&nbsp;{cwd:&nbsp;this.app.vault.adapter.basePath});<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;openTerminalAtPath.on('error',&nbsp;(err:&nbsp;Error)&nbsp;=&gt;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(err);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;pythonGnomeTerminal&nbsp;=&nbsp;this.addRibbonIcon(<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'file-terminal',&nbsp;'main.py&nbsp;(Gnome&nbsp;Terminal)',&nbsp;(evt:&nbsp;MouseEvent)&nbsp;=&gt;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;{spawn}&nbsp;=&nbsp;require('child_process');<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;command&nbsp;=&nbsp;'gnome-terminal'<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;cmd_args&nbsp;=&nbsp;[&quot;--&quot;,&nbsp;&quot;python3&quot;,&nbsp;&quot;main.py&quot;]<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(command)<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;openTerminalAtPath&nbsp;=&nbsp;spawn(command,&nbsp;cmd_args,&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shell:&nbsp;true,&nbsp;//@ts-ignore<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cwd:&nbsp;this.app.vault.adapter.basePath<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;openTerminalAtPath.on('error',&nbsp;(err:&nbsp;Error)&nbsp;=&gt;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(err);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;onunload()&nbsp;{<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>}<br/></code></pre><p>This is distilled from the Obsidian sample plugin, found
here: <a href="https://github.com/obsidianmd/obsidian-sample-plugin">https://github.com/obsidianmd/obsidian-sample-plugin</a></p>
<p>It adds two icons to the ribbon, one to open the terminal, and one to run the python script.</p>
<p><img src="https://raw.githubusercontent.com/CheeseCake87/gnome-terminal-loader/master/assets/gnome_terminal.png" alt="" /></p>
<p><img src="https://raw.githubusercontent.com/CheeseCake87/gnome-terminal-loader/master/assets/main_py_gnome_terminal.png" alt="" /></p>
<p>It's obviously only compatible with a Linux OS with gnome-terminal and python installed. I'm sure it could be adapted
for other OS's, but I don't have the time or the inclination to do that.</p>
<p>The decision to incorporate the python script into the plugin was an interesting thought to me. I initially started
attempting to build in git functionality, showing push and pull icons. However, you can quickly open a can of worms
when trying to deal with private repos. So, I decided to keep it simple, and just run the python script.</p>
<p>My solution for the python script was to have a main.py file in the root of the vault, that contains a simple cli menu
that I can extend in functionality. So I adapted the <code>git-push.py</code> and <code>git-pull.py</code> scripts into the <code>main.py</code> file,
controlled by a simple cli menu.</p>
<pre><code>import&nbsp;subprocess<br/><br/><br/>def&nbsp;git_pull():<br/>&nbsp;&nbsp;&nbsp;&nbsp;try:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subprocess.run(['git',&nbsp;'config',&nbsp;'credential.helper',&nbsp;'store'])<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subprocess.run(['git',&nbsp;'config',&nbsp;'credential.helper',&nbsp;'cache&nbsp;--timeout&nbsp;7200'])<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subprocess.run(['git',&nbsp;'pull',&nbsp;'origin',&nbsp;'master'])<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print('git&nbsp;pull&nbsp;success')<br/>&nbsp;&nbsp;&nbsp;&nbsp;except&nbsp;Exception&nbsp;as&nbsp;e:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(e)<br/><br/><br/>def&nbsp;git_push():<br/>&nbsp;&nbsp;&nbsp;&nbsp;try:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subprocess.run(['git',&nbsp;'config',&nbsp;'credential.helper',&nbsp;'store'])<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subprocess.run(['git',&nbsp;'config',&nbsp;'credential.helper',&nbsp;'cache&nbsp;--timeout&nbsp;7200'])<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subprocess.run(['git',&nbsp;'add',&nbsp;'.'])<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subprocess.run(['git',&nbsp;'commit',&nbsp;'-m',&nbsp;'update'])<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subprocess.run(['git',&nbsp;'push',&nbsp;'origin',&nbsp;'master'])<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print('git&nbsp;push&nbsp;success')<br/>&nbsp;&nbsp;&nbsp;&nbsp;except&nbsp;Exception&nbsp;as&nbsp;e:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(e)<br/><br/><br/>if&nbsp;__name__&nbsp;==&nbsp;'__main__':<br/>&nbsp;&nbsp;&nbsp;&nbsp;menu&nbsp;=&nbsp;-1<br/>&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;menu&nbsp;!=&nbsp;0:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;menu&nbsp;=&nbsp;int(input('1.&nbsp;git&nbsp;pull\n2.&nbsp;git&nbsp;push\n0.&nbsp;exit\n'))<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;menu&nbsp;==&nbsp;1:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;git_pull()<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elif&nbsp;menu&nbsp;==&nbsp;2:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;git_push()<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elif&nbsp;menu&nbsp;==&nbsp;0:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print('null')<br/></code></pre><p>Not the prettiest code, but it works.</p>
<p>A big missing thing from this solution is the ability to use other python libraries, to extend the
functionality beyond the python standard library. Maybe it would be a good idea to bake in a virtual environment with
some setup and checks? The purpose of the plugin is to create a python entry point possible, so I suppose that would be
up to whoever uses it.</p>
<p>The Beauty of this solution for me is that the main.py file follows the vault around in my commit to GitHub use case.</p>
<p>This obsidian plugin is available on GitHub, under an MIT license. Feel free to go wild with it.</p>
<p><a href="https://github.com/CheeseCake87/gnome-terminal-loader">https://github.com/CheeseCake87/gnome-terminal-loader</a></p>
<p>I have submitted the plugin to the Obsidian community plugins, so hopefully it will be available there soon.</p>
<p>OK, that's it for now.</p>
<p><em>I got carried away with my using python to commit my Obsidian vault to GitHub by David Carmichael</em></p>
]]>
            </content:encoded>
        </item>
        <item>
            <title>GitHub and Obsidian with the help of Python</title>
            <link>https://thecodingside.quest/2023-08-07_github-and-obsidian-with-the-help-of-python.html</link>
            <pubDate>Mon, 07 Aug 2023 10:14:32 +0100</pubDate>
            <guid>https://thecodingside.quest/2023-08-07_github-and-obsidian-with-the-help-of-python.html</guid>
            <description>
                <![CDATA[I explain how I used a small amount of Python <br/><a href='https://thecodingside.quest/2023-08-07_github-and-obsidian-with-the-help-of-python.html' target='_blank'>View Post</a>]]>
            </description>
            <content:encoded>
                <![CDATA[<p>Having trouble viewing the content below? <a href="https://thecodingside.quest/2023-08-07_github-and-obsidian-with-the-help-of-python.html">View original post here</a></p><p>At the time of writing this Obsidian sync, the service that Obsidian offers to allow you to synchronise all your notes
between computers is $10 a month (if you choose a monthly commitment) This price is shown to me with a geolocation of
the UK, so it may be different in your country.</p>
<p>There are far too many SaaS (Software as a Service) products to pay for these days, it's annoying. I paid £10 for an
online SVG animation application about 2 weeks ago to be able to export the animation in a different format - <em>arrh,</em> I
get people should get paid for their software, but it can get annoying; I know - I know, &quot;don't use it then&quot; you're
probably saying. Well, this is that effort.</p>
<p>The goal here is to get my software note-taking much better and Obsidian is perfect for that. I'm also on GitHub all the
time, and storing all my notes on a private repo seems like a good idea to me. The Problem is Obsidian has no Git
management. I
suppose this is a tactical move for you to buy their storage. Which is fair enough.</p>
<p>My solution is to use Python with subprocess to do a block of git commands to push and pull from GitHub. You'll need to
have git installed for this, obviously.</p>
<p><strong>For people that want to steam ahead, here's the code:</strong></p>
<p><code>git-pull.py</code></p>
<pre><code>import&nbsp;subprocess<br/><br/><br/>def&nbsp;git_pull():<br/>&nbsp;&nbsp;&nbsp;&nbsp;try:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subprocess.run(['git',&nbsp;'config',&nbsp;'credential.helper',&nbsp;'store'])<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subprocess.run(['git',&nbsp;'config',&nbsp;'credential.helper',&nbsp;'cache&nbsp;--timeout&nbsp;7200'])<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subprocess.run(['git',&nbsp;'pull',&nbsp;'origin',&nbsp;'master'])<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print('git&nbsp;pull&nbsp;success')<br/>&nbsp;&nbsp;&nbsp;&nbsp;except&nbsp;Exception&nbsp;as&nbsp;e:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(e)<br/><br/><br/>if&nbsp;__name__&nbsp;==&nbsp;'__main__':<br/>&nbsp;&nbsp;&nbsp;&nbsp;git_pull()<br/><br/></code></pre><p><code>git-push.py</code></p>
<pre><code>import&nbsp;subprocess<br/><br/><br/>def&nbsp;git_push():<br/>&nbsp;&nbsp;&nbsp;&nbsp;try:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subprocess.run(['git',&nbsp;'config',&nbsp;'credential.helper',&nbsp;'store'])<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subprocess.run(['git',&nbsp;'config',&nbsp;'credential.helper',&nbsp;'cache&nbsp;--timeout&nbsp;7200'])<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subprocess.run(['git',&nbsp;'add',&nbsp;'.'])<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subprocess.run(['git',&nbsp;'commit',&nbsp;'-m',&nbsp;'update'])<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subprocess.run(['git',&nbsp;'push',&nbsp;'origin',&nbsp;'master'])<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print('git&nbsp;push&nbsp;success')<br/>&nbsp;&nbsp;&nbsp;&nbsp;except&nbsp;Exception&nbsp;as&nbsp;e:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(e)<br/><br/><br/>if&nbsp;__name__&nbsp;==&nbsp;'__main__':<br/>&nbsp;&nbsp;&nbsp;&nbsp;git_push()<br/><br/></code></pre><p>These py files are in the root directory of the GitHub Repo:</p>
<pre><code>└──&nbsp;Repo/<br/>&nbsp;&nbsp;&nbsp;&nbsp;├──&nbsp;.obsidian/<br/>&nbsp;&nbsp;&nbsp;&nbsp;├──&nbsp;.git/<br/>&nbsp;&nbsp;&nbsp;&nbsp;├──&nbsp;flask-notes/<br/>&nbsp;&nbsp;&nbsp;&nbsp;├──&nbsp;python-notes/<br/>&nbsp;&nbsp;&nbsp;&nbsp;├──&nbsp;...<br/>&nbsp;&nbsp;&nbsp;&nbsp;├──&nbsp;git-push.py<br/>&nbsp;&nbsp;&nbsp;&nbsp;└──&nbsp;git-pull.py<br/></code></pre><p><strong>For the people that want more of an explanation on how to set this up:</strong></p>
<p>To get started, create a GutHub repo with your desired name. In my case, I called mine Obsidian, which I made private.
Making your repo private will mean you'll need some sort of password to be able to clone.</p>
<p>Log in to GitHub then go to your settings (click the profile picture top right, then settings)</p>
<p>At the bottom of the left-hand menu, click Developer settings, then Personal access tokens.</p>
<p>Now, I'm pretty lazy. In may case, I created a classic token by clicking Tokens (classic) then setting the token scopes
for Full control of private repositories, and setting it to never expire.</p>
<p>After setting that up, it will show you the token. I stored this in my password manager.</p>
<p>Now we want to make a local folder on your system. In my case I created a folder called Obsidian, <code>/home/david/Obsidian</code></p>
<p>Navigate to this folder and run the following command:</p>
<p><code>git clone https://github.com/&lt;your_username_here&gt;/Obsidian.git .</code></p>
<p>This will create a <code>.git</code> hidden folder in the directory.</p>
<p>Set your Obsidian app to work from the same directory. Now when you create any folders and files you can commit them to
the git repo.</p>
<p>Navigating to the repo folder and running a terminal window from there will ensure that your current working directory
is correct. Then you can run the commands:</p>
<p><code>python git-push.py</code></p>
<p>and or</p>
<p><code>python git-pull.py</code></p>
<p>As you may have noticed, there are two private folders in there. <code>.obsidian</code> and <code>.git</code>, I'm not familiar with how
important these two are to keep private, by that I mean not make public. In any case I made the code work with git
authentication, so you can make the repo private.</p>
<p>This process is fairly manual, but better than paying $10 a month, right?</p>
<p>Enjoy, bye!</p>
<p><em>GitHub and Obsidian with the help of Python by David Carmichael</em></p>
]]>
            </content:encoded>
        </item>
        <item>
            <title>Flask as a Static Site Generator</title>
            <link>https://thecodingside.quest/2023-08-06_flask-as-a-static-site-generator.html</link>
            <pubDate>Sun, 06 Aug 2023 15:00:00 +0100</pubDate>
            <guid>https://thecodingside.quest/2023-08-06_flask-as-a-static-site-generator.html</guid>
            <description>
                <![CDATA[Using Flask as a static site generator. <br/><a href='https://thecodingside.quest/2023-08-06_flask-as-a-static-site-generator.html' target='_blank'>View Post</a>]]>
            </description>
            <content:encoded>
                <![CDATA[<p>Having trouble viewing the content below? <a href="https://thecodingside.quest/2023-08-06_flask-as-a-static-site-generator.html">View original post here</a></p><p><strong>Update: This project has changed a lot since this post was written. Please visit the GitHub page to see the changes.</strong></p>
<p><a href="https://github.com/CheeseCake87/CheeseCake87">https://github.com/CheeseCake87/CheeseCake87</a></p>
<p>Hey guys! / folks! / [insert whatever cool kid greeting here]!</p>
<p>So I made a static site generator using Flask. Which is used to generate this site.</p>
<p>It's a single <code>app.py</code> file that is 85 lines long. Including that blank line that the IDE keeps complaining about when
coding in Python.</p>
<p>Here's the needed folder structure:</p>
<pre><code>├──&nbsp;docs/<br/>│&nbsp;&nbsp;&nbsp;├──&nbsp;static/<br/>│&nbsp;&nbsp;&nbsp;│&nbsp;&nbsp;&nbsp;└──&nbsp;...<br/>│&nbsp;&nbsp;&nbsp;└──&nbsp;...<br/>├──&nbsp;markdown/<br/>│&nbsp;&nbsp;&nbsp;└──&nbsp;2023-08-06:flask-as-a-static-site-generator.md<br/>├──&nbsp;templates/<br/>│&nbsp;&nbsp;&nbsp;├──&nbsp;__main__.html<br/>│&nbsp;&nbsp;&nbsp;└──&nbsp;index.html<br/>└──&nbsp;app.py<br/></code></pre><p>Here's the <code>app.py</code>:</p>
<pre><code>from&nbsp;pathlib&nbsp;import&nbsp;Path<br/><br/>import&nbsp;mistune<br/>from&nbsp;flask&nbsp;import&nbsp;Flask,&nbsp;render_template<br/>from&nbsp;pygments&nbsp;import&nbsp;highlight<br/>from&nbsp;pygments.formatters&nbsp;import&nbsp;html<br/>from&nbsp;pygments.lexers&nbsp;import&nbsp;get_lexer_by_name<br/>from&nbsp;pygments.util&nbsp;import&nbsp;ClassNotFound<br/><br/><br/>class&nbsp;HighlightRenderer(mistune.HTMLRenderer):<br/>&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;block_code(self,&nbsp;code,&nbsp;info=None):<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;info:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;info&nbsp;==&nbsp;&quot;jinja2&quot;:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;info&nbsp;=&nbsp;&quot;jinja&quot;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lexer&nbsp;=&nbsp;get_lexer_by_name(info,&nbsp;stripall=True)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;except&nbsp;ClassNotFound:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lexer&nbsp;=&nbsp;get_lexer_by_name('text',&nbsp;stripall=True)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatter&nbsp;=&nbsp;html.HtmlFormatter()<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;highlight(code,&nbsp;lexer,&nbsp;formatter)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;'&lt;pre&gt;&lt;code&gt;'&nbsp;+&nbsp;mistune.escape(code)&nbsp;+&nbsp;'&lt;/code&gt;&lt;/pre&gt;'<br/><br/><br/>cwd&nbsp;=&nbsp;Path(__file__).parent<br/><br/><br/>def&nbsp;get_docs_files(docs_dir:&nbsp;Path)&nbsp;-&gt;&nbsp;list:<br/>&nbsp;&nbsp;&nbsp;&nbsp;_&nbsp;=&nbsp;[]<br/>&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;f&nbsp;in&nbsp;docs_dir.glob(&quot;*.html&quot;):<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;f.stem&nbsp;==&nbsp;&quot;index&quot;:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_.append(f.stem)<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;_<br/><br/><br/>def&nbsp;compiler(re_compile=False):<br/>&nbsp;&nbsp;&nbsp;&nbsp;docs_dir&nbsp;=&nbsp;cwd&nbsp;/&nbsp;&quot;docs&quot;<br/>&nbsp;&nbsp;&nbsp;&nbsp;markdown_dir&nbsp;=&nbsp;cwd&nbsp;/&nbsp;&quot;markdown&quot;<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;index&nbsp;=&nbsp;docs_dir&nbsp;/&nbsp;&quot;index.html&quot;<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;docs_dir_files&nbsp;=&nbsp;get_docs_files(docs_dir)<br/>&nbsp;&nbsp;&nbsp;&nbsp;markdown_dir_files&nbsp;=&nbsp;markdown_dir.glob(&quot;*.md&quot;)<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;re_compile:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;file&nbsp;in&nbsp;docs_dir_files:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(docs_dir&nbsp;/&nbsp;f&quot;{file}.html&quot;).unlink()<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;file&nbsp;in&nbsp;markdown_dir_files:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;file.stem&nbsp;not&nbsp;in&nbsp;docs_dir_files&nbsp;or&nbsp;re_compile:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;markdown&nbsp;=&nbsp;mistune.Markdown(renderer=HighlightRenderer())<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;with&nbsp;open(docs_dir&nbsp;/&nbsp;f&quot;{file.stem}.html&quot;,&nbsp;mode=&quot;w&quot;)&nbsp;as&nbsp;f:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;split&nbsp;=&nbsp;file.stem.split(&quot;:&quot;)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.write(render_template(<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;__main__.html&quot;,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title=split[1],<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;date=split[0],<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;content=markdown(file.read_text())<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;))<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;index.write_text(<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;render_template(<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;index.html&quot;,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pages=get_docs_files(docs_dir)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>&nbsp;&nbsp;&nbsp;&nbsp;)<br/><br/><br/>def&nbsp;create_app():<br/>&nbsp;&nbsp;&nbsp;&nbsp;app&nbsp;=&nbsp;Flask(__name__)<br/>&nbsp;&nbsp;&nbsp;&nbsp;app.static_folder&nbsp;=&nbsp;&quot;static&quot;<br/>&nbsp;&nbsp;&nbsp;&nbsp;app.template_folder&nbsp;=&nbsp;&quot;templates&quot;<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;@app.cli.command(&quot;compile&quot;)<br/>&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;compile_site():<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;compiler()<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;@app.cli.command(&quot;re-compile&quot;)<br/>&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;re_compile_site():<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;compiler(re_compile=True)<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;app<br/></code></pre><p>If you can't work it out from the code, here's how it works:</p>
<p>Running <code>flask compile</code></p>
<ol>
<li>It gets all the markdown files in the <code>markdown/</code> folder.</li>
<li>It pulls the title and the date from the filename of the markdown file. &quot;-&quot; in the title is replaced with a
space, &quot;-&quot; are better for URLs, so the internet says...</li>
<li>It then gets all the html files in the <code>docs/</code> folder.</li>
<li>It then compares the two lists, and if there is a markdown file that doesn't have a corresponding html file, it
generates the html file.</li>
<li>It then generates the <code>index.html</code> file with all the links to the other pages.</li>
</ol>
<p>Running <code>flask re-compile</code> will do the same thing, but it will delete all the html files in the <code>docs/</code> folder first.</p>
<p>This project sits on my main GitHub repo, ya know the one that is the same as your username, here's the link:
<a href="https://github.com/CheeseCake87/CheeseCake87">https://github.com/CheeseCake87/CheeseCake87</a></p>
<p>The project contains the template files and the static files, so you can see how it works.</p>
<p>The html is being saved in the docs folder, because GitHub pages uses that folder to serve the site. The site is then
setup with the domain name thecodingside.quest, which was surprisingly cheap to register.</p>
<p>OK, Bye.</p>
<p><em>Flask As A Static Site Generator by David Carmichael</em></p>
]]>
            </content:encoded>
        </item>
        <item>
            <title>A Short Uninteresting Introduction</title>
            <link>https://thecodingside.quest/2023-08-05_a-short-uninteresting-introduction.html</link>
            <pubDate>Sat, 05 Aug 2023 16:00:00 +0100</pubDate>
            <guid>https://thecodingside.quest/2023-08-05_a-short-uninteresting-introduction.html</guid>
            <description>
                <![CDATA[A short introduction to me and this blog. <br/><a href='https://thecodingside.quest/2023-08-05_a-short-uninteresting-introduction.html' target='_blank'>View Post</a>]]>
            </description>
            <content:encoded>
                <![CDATA[<p>Having trouble viewing the content below? <a href="https://thecodingside.quest/2023-08-05_a-short-uninteresting-introduction.html">View original post here</a></p><p>Hello, my name is David, and
I've had a very windy career path in the tech world.</p>
<p>I started out as a postman that was destined to be a car mechanic, following in my father's footsteps.</p>
<p>IT had always interested me when I was young. So I went to college to study computer science, and I've been working in
the tech industry ever since.
I started my own business at an early age, which wasn't the best idea, but I learned a lot from it.</p>
<p>In my early career, I was doing both web development and IT support jobs. I would work for myself and others until
I found a permanent role at a local company managing ecommerce websites.</p>
<p>From there I moved further into the IT support world, moving around a few companies doing
vastly different levels of support and repairs. Over the years, I've worked on the microscopic; trace
repairs on motherboards to phone repairs all the way up to
the macroscopic; network infrastructure deployments to hypervisors.</p>
<p>My education was in software though. The support and repair world may have dragged me in, but I never stopped coding.</p>
<p>My first languages were web-based. Starting with the obvious, HTML and CSS. Touching on PHP,
didn't like it, so I learned the next worst thing, Coldfusion.</p>
<p>Using a combination of Coldfusion and Javascript, I built a few websites for myself and others. Ending
up with around 12 local businesses using my services.</p>
<p>My coding main quest was pretty slow during my aforementioned support career path. I was loosely learning
bits of Python, javascript, and drips of things like bash and lua. My education taught me C++
and Visual Basic. Visual Basic 6... which was deprecated just as I finished
my education, and who is able to retain any C++ when you don't use it every day?</p>
<p>Anyway, fast-forward to the present day. I'm now a full time
software developer/engineer/(whatever the kids are calling it these days) working within the insolvency sector.</p>
<p>We use mostly Flask in our stack, which is not the worst thing in the world. I've grown to really love python,
and I'm glad I've been able to use it in my career. Since working here, the only other language I've used is Dart.
Boss man said he wanted a phone app, and Flutter was chosen. I don't think I'll use Dart for anything other than
Flutter.</p>
<p>Yeah - so here we are, at the end of probably the worst blog post you've ever read. Oh, the purpose of this blog!</p>
<p>I'm going to be using this blog to document my journey through the world of software development. I plan to put anything
interesting I learn here, no matter how foolish it is. I have plans to document a journey of learning and developing.</p>
<p>The Next post will be what I'm using to build this site. I think you might like it; it's pretty cool. I also plan to
learn
as many languages as I can, and I'll be documenting that here too.</p>
<p><em>A Short Uninteresting Introduction by David Carmichael</em></p>
]]>
            </content:encoded>
        </item>
    </channel>
</rss>