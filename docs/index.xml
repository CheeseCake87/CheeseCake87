<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>TheCodingSide.Quest</title>
        <link>https://thecodingside.quest</link>
        <description>Recent content on TheCodingSide.Quest</description>
        <generator>Flask Static Site Generator written by David Carmichael.</generator>
        <language>en-gb</language>
        <lastBuildDate>Sun, 06 Aug 2023 18:28:31 +0100</lastBuildDate>
        <atom:link href="https://thecodingside.quest/index.xml" rel="self" type="application/rss+xml"/>
        <item>
            <title>Flask as a Static Site Generator</title>
            <link>https://thecodingside.quest/2023-08-06_flask-as-a-static-site-generator.html</link>
            <pubDate>Sun, 06 Aug 2023 15:00:00 +0100</pubDate>
            <guid>https://thecodingside.quest/2023-08-06_flask-as-a-static-site-generator.html</guid>
            <description>
                <![CDATA[Using Flask as a static site generator. <br/><a href='https://thecodingside.quest/2023-08-06_flask-as-a-static-site-generator.html' target='_blank'>View Post</a>]]>
            </description>
            <content:encoded>
                <![CDATA[<p>Having trouble viewing the content below?<a href='https://thecodingside.quest/2023-08-06_flask-as-a-static-site-generator.html' target='_blank'>View original post here</a></p><p>Hey guys! / folks! / [insert whatever cool kid greeting here]!</p>
<p>So I made a static site generator using Flask. Which is used to generate this site.</p>
<p>It's a single <code>app.py</code> file that is 85 lines long. Including that blank line that the IDE keeps complaining about when
coding in Python.</p>
<p>Here's the needed folder structure:</p>
<div class="highlight"><pre><span></span>├── docs/
│   ├── static/
│   │   └── ...
│   └── ...
├── markdown/
│   └── 2023-08-06:flask-as-a-static-site-generator.md
├── templates/
│   ├── __main__.html
│   └── index.html
└── app.py
</pre></div>
<p>Here's the <code>app.py</code>:</p>
<div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>

<span class="kn">import</span> <span class="nn">mistune</span>
<span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">render_template</span>
<span class="kn">from</span> <span class="nn">pygments</span> <span class="kn">import</span> <span class="n">highlight</span>
<span class="kn">from</span> <span class="nn">pygments.formatters</span> <span class="kn">import</span> <span class="n">html</span>
<span class="kn">from</span> <span class="nn">pygments.lexers</span> <span class="kn">import</span> <span class="n">get_lexer_by_name</span>
<span class="kn">from</span> <span class="nn">pygments.util</span> <span class="kn">import</span> <span class="n">ClassNotFound</span>


<span class="k">class</span> <span class="nc">HighlightRenderer</span><span class="p">(</span><span class="n">mistune</span><span class="o">.</span><span class="n">HTMLRenderer</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">block_code</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">code</span><span class="p">,</span> <span class="n">info</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">info</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">info</span> <span class="o">==</span> <span class="s2">&quot;jinja2&quot;</span><span class="p">:</span>
                <span class="n">info</span> <span class="o">=</span> <span class="s2">&quot;jinja&quot;</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">lexer</span> <span class="o">=</span> <span class="n">get_lexer_by_name</span><span class="p">(</span><span class="n">info</span><span class="p">,</span> <span class="n">stripall</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
            <span class="k">except</span> <span class="n">ClassNotFound</span><span class="p">:</span>
                <span class="n">lexer</span> <span class="o">=</span> <span class="n">get_lexer_by_name</span><span class="p">(</span><span class="s1">&#39;text&#39;</span><span class="p">,</span> <span class="n">stripall</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
            <span class="n">formatter</span> <span class="o">=</span> <span class="n">html</span><span class="o">.</span><span class="n">HtmlFormatter</span><span class="p">()</span>
            <span class="k">return</span> <span class="n">highlight</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="n">lexer</span><span class="p">,</span> <span class="n">formatter</span><span class="p">)</span>
        <span class="k">return</span> <span class="s1">&#39;&lt;pre&gt;&lt;code&gt;&#39;</span> <span class="o">+</span> <span class="n">mistune</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="n">code</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;&lt;/code&gt;&lt;/pre&gt;&#39;</span>


<span class="n">cwd</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="vm">__file__</span><span class="p">)</span><span class="o">.</span><span class="n">parent</span>


<span class="k">def</span> <span class="nf">get_docs_files</span><span class="p">(</span><span class="n">docs_dir</span><span class="p">:</span> <span class="n">Path</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">list</span><span class="p">:</span>
    <span class="n">_</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">docs_dir</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s2">&quot;*.html&quot;</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">f</span><span class="o">.</span><span class="n">stem</span> <span class="o">==</span> <span class="s2">&quot;index&quot;</span><span class="p">:</span>
            <span class="k">continue</span>
        <span class="n">_</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">stem</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">_</span>


<span class="k">def</span> <span class="nf">compiler</span><span class="p">(</span><span class="n">re_compile</span><span class="o">=</span><span class="kc">False</span><span class="p">):</span>
    <span class="n">docs_dir</span> <span class="o">=</span> <span class="n">cwd</span> <span class="o">/</span> <span class="s2">&quot;docs&quot;</span>
    <span class="n">markdown_dir</span> <span class="o">=</span> <span class="n">cwd</span> <span class="o">/</span> <span class="s2">&quot;markdown&quot;</span>

    <span class="n">index</span> <span class="o">=</span> <span class="n">docs_dir</span> <span class="o">/</span> <span class="s2">&quot;index.html&quot;</span>

    <span class="n">docs_dir_files</span> <span class="o">=</span> <span class="n">get_docs_files</span><span class="p">(</span><span class="n">docs_dir</span><span class="p">)</span>
    <span class="n">markdown_dir_files</span> <span class="o">=</span> <span class="n">markdown_dir</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s2">&quot;*.md&quot;</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">re_compile</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">file</span> <span class="ow">in</span> <span class="n">docs_dir_files</span><span class="p">:</span>
            <span class="p">(</span><span class="n">docs_dir</span> <span class="o">/</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">file</span><span class="si">}</span><span class="s2">.html&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">unlink</span><span class="p">()</span>

    <span class="k">for</span> <span class="n">file</span> <span class="ow">in</span> <span class="n">markdown_dir_files</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">file</span><span class="o">.</span><span class="n">stem</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">docs_dir_files</span> <span class="ow">or</span> <span class="n">re_compile</span><span class="p">:</span>
            <span class="n">markdown</span> <span class="o">=</span> <span class="n">mistune</span><span class="o">.</span><span class="n">Markdown</span><span class="p">(</span><span class="n">renderer</span><span class="o">=</span><span class="n">HighlightRenderer</span><span class="p">())</span>
            <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">docs_dir</span> <span class="o">/</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">file</span><span class="o">.</span><span class="n">stem</span><span class="si">}</span><span class="s2">.html&quot;</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s2">&quot;w&quot;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="n">split</span> <span class="o">=</span> <span class="n">file</span><span class="o">.</span><span class="n">stem</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;:&quot;</span><span class="p">)</span>
                <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">render_template</span><span class="p">(</span>
                    <span class="s2">&quot;__main__.html&quot;</span><span class="p">,</span>
                    <span class="n">title</span><span class="o">=</span><span class="n">split</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span>
                    <span class="n">date</span><span class="o">=</span><span class="n">split</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span>
                    <span class="n">content</span><span class="o">=</span><span class="n">markdown</span><span class="p">(</span><span class="n">file</span><span class="o">.</span><span class="n">read_text</span><span class="p">())</span>
                <span class="p">))</span>

    <span class="n">index</span><span class="o">.</span><span class="n">write_text</span><span class="p">(</span>
        <span class="n">render_template</span><span class="p">(</span>
            <span class="s2">&quot;index.html&quot;</span><span class="p">,</span>
            <span class="n">pages</span><span class="o">=</span><span class="n">get_docs_files</span><span class="p">(</span><span class="n">docs_dir</span><span class="p">)</span>
        <span class="p">)</span>
    <span class="p">)</span>


<span class="k">def</span> <span class="nf">create_app</span><span class="p">():</span>
    <span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="vm">__name__</span><span class="p">)</span>
    <span class="n">app</span><span class="o">.</span><span class="n">static_folder</span> <span class="o">=</span> <span class="s2">&quot;static&quot;</span>
    <span class="n">app</span><span class="o">.</span><span class="n">template_folder</span> <span class="o">=</span> <span class="s2">&quot;templates&quot;</span>

    <span class="nd">@app</span><span class="o">.</span><span class="n">cli</span><span class="o">.</span><span class="n">command</span><span class="p">(</span><span class="s2">&quot;compile&quot;</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">compile_site</span><span class="p">():</span>
        <span class="n">compiler</span><span class="p">()</span>

    <span class="nd">@app</span><span class="o">.</span><span class="n">cli</span><span class="o">.</span><span class="n">command</span><span class="p">(</span><span class="s2">&quot;re-compile&quot;</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">re_compile_site</span><span class="p">():</span>
        <span class="n">compiler</span><span class="p">(</span><span class="n">re_compile</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">app</span>
</pre></div>
<p>If you can't work it out from the code, here's how it works:</p>
<p>Running <code>flask compile</code></p>
<ol>
<li>It gets all the markdown files in the <code>markdown/</code> folder.</li>
<li>It pulls the title and the date from the filename of the markdown file. &quot;-&quot; in the title is replaced with a
space, &quot;-&quot; are better for URLs, so the internet says...</li>
<li>It then gets all the html files in the <code>docs/</code> folder.</li>
<li>It then compares the two lists, and if there is a markdown file that doesn't have a corresponding html file, it
generates the html file.</li>
<li>It then generates the <code>index.html</code> file with all the links to the other pages.</li>
</ol>
<p>Running <code>flask re-compile</code> will do the same thing, but it will delete all the html files in the <code>docs/</code> folder first.</p>
<p>This project sits on my main GitHub repo, ya know the one that is the same as your username, here's the link:
<a href="https://github.com/CheeseCake87/CheeseCake87">https://github.com/CheeseCake87/CheeseCake87</a></p>
<p>The project contains the template files and the static files, so you can see how it works.</p>
<p>The html is being saved in the docs folder, because GitHub pages uses that folder to serve the site. The site is then
setup with the domain name thecodingside.quest, which was surprisingly cheap to register.</p>
<p>OK, Bye.</p>
<p><em>Flask As A Static Site Generator by David Carmichael</em></p>
]]>
            </content:encoded>
        </item>
        <item>
            <title>A Short Uninteresting Introduction</title>
            <link>https://thecodingside.quest/2023-08-05_a-short-uninteresting-introduction.html</link>
            <pubDate>Sat, 05 Aug 2023 16:00:00 +0100</pubDate>
            <guid>https://thecodingside.quest/2023-08-05_a-short-uninteresting-introduction.html</guid>
            <description>
                <![CDATA[A short introduction to me and this blog. <br/><a href='https://thecodingside.quest/2023-08-05_a-short-uninteresting-introduction.html' target='_blank'>View Post</a>]]>
            </description>
            <content:encoded>
                <![CDATA[<p>Having trouble viewing the content below?<a href='https://thecodingside.quest/2023-08-05_a-short-uninteresting-introduction.html' target='_blank'>View original post here</a></p><p>Hello, my name is David, and
I've had a very windy career path in the tech world.</p>
<p>I started out as a postman that was destined to be a car mechanic, following in my father's footsteps.</p>
<p>IT had always interested me when I was young. So I went to college to study computer science, and I've been working in
the tech industry ever since.
I started my own business at an early age, which wasn't the best idea, but I learned a lot from it.</p>
<p>In my early career, I was doing both web development and IT support jobs. I would work for myself and others until
I found a permanent role at a local company managing ecommerce websites.</p>
<p>From there I moved further into the IT support world, moving around a few companies doing
vastly different levels of support and repairs. Over the years, I've worked on the microscopic; trace
repairs on motherboards to phone repairs all the way up to
the macroscopic; network infrastructure deployments to hypervisors.</p>
<p>My education was in software though. The support and repair world may have dragged me in, but I never stopped coding.</p>
<p>My first languages were web-based. Starting with the obvious, HTML and CSS. Touching on PHP,
didn't like it, so I learned the next worst thing, Coldfusion.</p>
<p>Using a combination of Coldfusion and Javascript, I built a few websites for myself and others. Ending
up with around 12 local businesses using my services.</p>
<p>My coding main quest was pretty slow during my aforementioned support career path. I was loosely learning
bits of Python, javascript, and drips of things like bash and lua. My education taught me C++
and Visual Basic. Visual Basic 6... which was deprecated just as I finished
my education, and who is able to retain any C++ when you don't use it every day?</p>
<p>Anyway, fast-forward to the present day. I'm now a full time
software developer/engineer/(whatever the kids are calling it these days) working within the insolvency sector.</p>
<p>We use mostly Flask in our stack, which is not the worst thing in the world. I've grown to really love python,
and I'm glad I've been able to use it in my career. Since working here, the only other language I've used is Dart.
Boss man said he wanted a phone app, and Flutter was chosen. I don't think I'll use Dart for anything other than
Flutter.</p>
<p>Yeah - so here we are, at the end of probably the worst blog post you've ever read. Oh, the purpose of this blog!</p>
<p>I'm going to be using this blog to document my journey through the world of software development. I plan to put anything
interesting I learn here, no matter how foolish it is. I have plans to document a journey of learning and developing.</p>
<p>The Next post will be what I'm using to build this site. I think you might like it; it's pretty cool. I also plan to
learn
as many languages as I can, and I'll be documenting that here too.</p>
<p><em>A Short Uninteresting Introduction by David Carmichael</em></p>
]]>
            </content:encoded>
        </item>
    </channel>
</rss>