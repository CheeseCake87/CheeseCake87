<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>TheCodingSide.Quest</title>
        <link>https://thecodingside.quest</link>
        <description>Recent content on TheCodingSide.Quest</description>
        <generator>Flask Static Site Generator written by David Carmichael.</generator>
        <language>en-gb</language>
        <lastBuildDate>Mon, 07 Aug 2023 13:40:05 +0100</lastBuildDate>
        <atom:link href="https://thecodingside.quest/index.xml" rel="self" type="application/rss+xml"/>
        <item>
            <title>GitHub and Obsidian with the help of Python</title>
            <link>https://thecodingside.quest/2023-08-07_github-and-obsidian-with-the-help-of-python.html</link>
            <pubDate>Mon, 07 Aug 2023 10:14:32 +0100</pubDate>
            <guid>https://thecodingside.quest/2023-08-07_github-and-obsidian-with-the-help-of-python.html</guid>
            <description>
                <![CDATA[I explain how I used a small amount of Python to take most of the pain out of committing my Obsidian markdown library to GitHub. <br/><a href='https://thecodingside.quest/2023-08-07_github-and-obsidian-with-the-help-of-python.html' target='_blank'>View Post</a>]]>
            </description>
            <content:encoded>
                <![CDATA[<p>Having trouble viewing the content below? <a href='https://thecodingside.quest/2023-08-07_github-and-obsidian-with-the-help-of-python.html target='_blank'>View original post here</a></p><p>At the time of writing this Obsidian sync, the service that Obsidian offers to allow you to synchronise all your notes
between computers is $10 a month (if you choose a monthly commitment) This price is shown to me with a geolocation of
the UK, so it may be different in your country.</p>
<p>There are far too many SaaS (Software as a Service) products to pay for these days, it's annoying. I paid £10 for an
online SVG animation application about 2 weeks ago to be able to export the animation in a different format - <em>arrh,</em> I
get people should get paid for their software, but it can get annoying; I know - I know, &quot;don't use it then&quot; you're
probably saying. Well, this is that effort.</p>
<p>The goal here is to get my software note-taking much better and Obsidian is perfect for that. I'm also on GitHub all the
time, and storing all my notes on a private repo seems like a good idea to me. The Problem is Obsidian has no Git management. I
suppose this is a tactical move for you to buy their storage. Which is fair enough.</p>
<p>My solution is to use Python with subprocess to do a block of git commands to push and pull from GitHub. You'll need to
have git installed for this, obviously.</p>
<p><strong>For people that want to steam ahead, here's the code:</strong></p>
<p><code>git-pull.py</code></p>
<pre><code class="language-python">import subprocess


def git_pull():
    try:
        subprocess.run(['git', 'config', 'credential.helper', 'store'])
        subprocess.run(['git', 'config', 'credential.helper', 'cache --timeout 7200'])
        subprocess.run(['git', 'pull', 'origin', 'master'])
        print('git pull success')
    except Exception as e:
        print(e)


if __name__ == '__main__':
    git_pull()

</code></pre>
<p><code>git-push.py</code></p>
<pre><code class="language-python">import subprocess


def git_push():
    try:
        subprocess.run(['git', 'config', 'credential.helper', 'store'])
        subprocess.run(['git', 'config', 'credential.helper', 'cache --timeout 7200'])
        subprocess.run(['git', 'add', '.'])
        subprocess.run(['git', 'commit', '-m', 'update'])
        subprocess.run(['git', 'push', 'origin', 'master'])
        print('git push success')
    except Exception as e:
        print(e)


if __name__ == '__main__':
    git_push()

</code></pre>
<p>These py files are in the root directory of the GitHub Repo:</p>
<pre><code>└── Repo/
    ├── .obsidian/
    ├── .git/
    ├── flask-notes/
    ├── python-notes/
    ├── ...
    ├── git-push.py
    └── git-pull.py
</code></pre>
<p><strong>For the people that want more of an explanation on how to set this up:</strong></p>
<p>To get started, create a GutHub repo with your desired name. In my case, I called mine Obsidian, which I made private.
Making your repo private will mean you'll need some sort of password to be able to clone.</p>
<p>Log in to GitHub then go to your settings (click the profile picture top right, then settings)</p>
<p>At the bottom of the left-hand menu, click Developer settings, then Personal access tokens.</p>
<p>Now, I'm pretty lazy. In may case, I created a classic token by clicking Tokens (classic) then setting the token scopes
for Full control of private repositories, and setting it to never expire.</p>
<p>After setting that up, it will show you the token. I stored this in my password manager.</p>
<p>Now we want to make a local folder on your system. In my case I created a folder called Obsidian, <code>/home/david/Obsidian</code></p>
<p>Navigate to this folder and run the following command:</p>
<p><code>git clone https://github.com/&lt;your_username_here&gt;/Obsidian.git .</code></p>
<p>This will create a <code>.git</code> hidden folder in the directory.</p>
<p>Set your Obsidian app to work from the same directory. Now when you create any folders and files you can commit them to
the git repo.</p>
<p>Navigating to the repo folder and running a terminal window from there will ensure that your current working directory
is correct. Then you can run the commands:</p>
<p><code>python git-push.py</code></p>
<p>and or</p>
<p><code>python git-pull.py</code></p>
<p>As you may have noticed, there are two private folders in there. <code>.obsidian</code> and <code>.git</code>, I'm not familiar with how
important these two are to keep private, by that I mean not make public. In any case I made the code work with git
authentication, so you can make the repo private.</p>
<p>This process is fairly manual, but better than paying $10 a month, right?</p>
<p>Enjoy, bye!</p>
<p><em>GitHub and Obsidian with the help of Python by David Carmichael</em></p>
]]>
            </content:encoded>
        </item>
        <item>
            <title>Flask as a Static Site Generator</title>
            <link>https://thecodingside.quest/2023-08-06_flask-as-a-static-site-generator.html</link>
            <pubDate>Sun, 06 Aug 2023 15:00:00 +0100</pubDate>
            <guid>https://thecodingside.quest/2023-08-06_flask-as-a-static-site-generator.html</guid>
            <description>
                <![CDATA[Using Flask as a static site generator. <br/><a href='https://thecodingside.quest/2023-08-06_flask-as-a-static-site-generator.html' target='_blank'>View Post</a>]]>
            </description>
            <content:encoded>
                <![CDATA[<p>Having trouble viewing the content below? <a href='https://thecodingside.quest/2023-08-06_flask-as-a-static-site-generator.html target='_blank'>View original post here</a></p><p><strong>Update: This project has changed a lot since this post was written. Please visit the GitHub page to see the changes.</strong></p>
<p><a href="https://github.com/CheeseCake87/CheeseCake87">https://github.com/CheeseCake87/CheeseCake87</a></p>
<p>Hey guys! / folks! / [insert whatever cool kid greeting here]!</p>
<p>So I made a static site generator using Flask. Which is used to generate this site.</p>
<p>It's a single <code>app.py</code> file that is 85 lines long. Including that blank line that the IDE keeps complaining about when
coding in Python.</p>
<p>Here's the needed folder structure:</p>
<pre><code class="language-text">├── docs/
│   ├── static/
│   │   └── ...
│   └── ...
├── markdown/
│   └── 2023-08-06:flask-as-a-static-site-generator.md
├── templates/
│   ├── __main__.html
│   └── index.html
└── app.py
</code></pre>
<p>Here's the <code>app.py</code>:</p>
<pre><code class="language-python">from pathlib import Path

import mistune
from flask import Flask, render_template
from pygments import highlight
from pygments.formatters import html
from pygments.lexers import get_lexer_by_name
from pygments.util import ClassNotFound


class HighlightRenderer(mistune.HTMLRenderer):
    def block_code(self, code, info=None):
        if info:
            if info == &quot;jinja2&quot;:
                info = &quot;jinja&quot;
            try:
                lexer = get_lexer_by_name(info, stripall=True)
            except ClassNotFound:
                lexer = get_lexer_by_name('text', stripall=True)
            formatter = html.HtmlFormatter()
            return highlight(code, lexer, formatter)
        return '&lt;pre&gt;&lt;code&gt;' + mistune.escape(code) + '&lt;/code&gt;&lt;/pre&gt;'


cwd = Path(__file__).parent


def get_docs_files(docs_dir: Path) -&gt; list:
    _ = []
    for f in docs_dir.glob(&quot;*.html&quot;):
        if f.stem == &quot;index&quot;:
            continue
        _.append(f.stem)

    return _


def compiler(re_compile=False):
    docs_dir = cwd / &quot;docs&quot;
    markdown_dir = cwd / &quot;markdown&quot;

    index = docs_dir / &quot;index.html&quot;

    docs_dir_files = get_docs_files(docs_dir)
    markdown_dir_files = markdown_dir.glob(&quot;*.md&quot;)

    if re_compile:
        for file in docs_dir_files:
            (docs_dir / f&quot;{file}.html&quot;).unlink()

    for file in markdown_dir_files:
        if file.stem not in docs_dir_files or re_compile:
            markdown = mistune.Markdown(renderer=HighlightRenderer())
            with open(docs_dir / f&quot;{file.stem}.html&quot;, mode=&quot;w&quot;) as f:
                split = file.stem.split(&quot;:&quot;)
                f.write(render_template(
                    &quot;__main__.html&quot;,
                    title=split[1],
                    date=split[0],
                    content=markdown(file.read_text())
                ))

    index.write_text(
        render_template(
            &quot;index.html&quot;,
            pages=get_docs_files(docs_dir)
        )
    )


def create_app():
    app = Flask(__name__)
    app.static_folder = &quot;static&quot;
    app.template_folder = &quot;templates&quot;

    @app.cli.command(&quot;compile&quot;)
    def compile_site():
        compiler()

    @app.cli.command(&quot;re-compile&quot;)
    def re_compile_site():
        compiler(re_compile=True)

    return app
</code></pre>
<p>If you can't work it out from the code, here's how it works:</p>
<p>Running <code>flask compile</code></p>
<ol>
<li>It gets all the markdown files in the <code>markdown/</code> folder.</li>
<li>It pulls the title and the date from the filename of the markdown file. &quot;-&quot; in the title is replaced with a
space, &quot;-&quot; are better for URLs, so the internet says...</li>
<li>It then gets all the html files in the <code>docs/</code> folder.</li>
<li>It then compares the two lists, and if there is a markdown file that doesn't have a corresponding html file, it
generates the html file.</li>
<li>It then generates the <code>index.html</code> file with all the links to the other pages.</li>
</ol>
<p>Running <code>flask re-compile</code> will do the same thing, but it will delete all the html files in the <code>docs/</code> folder first.</p>
<p>This project sits on my main GitHub repo, ya know the one that is the same as your username, here's the link:
<a href="https://github.com/CheeseCake87/CheeseCake87">https://github.com/CheeseCake87/CheeseCake87</a></p>
<p>The project contains the template files and the static files, so you can see how it works.</p>
<p>The html is being saved in the docs folder, because GitHub pages uses that folder to serve the site. The site is then
setup with the domain name thecodingside.quest, which was surprisingly cheap to register.</p>
<p>OK, Bye.</p>
<p><em>Flask As A Static Site Generator by David Carmichael</em></p>
]]>
            </content:encoded>
        </item>
        <item>
            <title>A Short Uninteresting Introduction</title>
            <link>https://thecodingside.quest/2023-08-05_a-short-uninteresting-introduction.html</link>
            <pubDate>Sat, 05 Aug 2023 16:00:00 +0100</pubDate>
            <guid>https://thecodingside.quest/2023-08-05_a-short-uninteresting-introduction.html</guid>
            <description>
                <![CDATA[A short introduction to me and this blog. <br/><a href='https://thecodingside.quest/2023-08-05_a-short-uninteresting-introduction.html' target='_blank'>View Post</a>]]>
            </description>
            <content:encoded>
                <![CDATA[<p>Having trouble viewing the content below? <a href='https://thecodingside.quest/2023-08-05_a-short-uninteresting-introduction.html target='_blank'>View original post here</a></p><p>Hello, my name is David, and
I've had a very windy career path in the tech world.</p>
<p>I started out as a postman that was destined to be a car mechanic, following in my father's footsteps.</p>
<p>IT had always interested me when I was young. So I went to college to study computer science, and I've been working in
the tech industry ever since.
I started my own business at an early age, which wasn't the best idea, but I learned a lot from it.</p>
<p>In my early career, I was doing both web development and IT support jobs. I would work for myself and others until
I found a permanent role at a local company managing ecommerce websites.</p>
<p>From there I moved further into the IT support world, moving around a few companies doing
vastly different levels of support and repairs. Over the years, I've worked on the microscopic; trace
repairs on motherboards to phone repairs all the way up to
the macroscopic; network infrastructure deployments to hypervisors.</p>
<p>My education was in software though. The support and repair world may have dragged me in, but I never stopped coding.</p>
<p>My first languages were web-based. Starting with the obvious, HTML and CSS. Touching on PHP,
didn't like it, so I learned the next worst thing, Coldfusion.</p>
<p>Using a combination of Coldfusion and Javascript, I built a few websites for myself and others. Ending
up with around 12 local businesses using my services.</p>
<p>My coding main quest was pretty slow during my aforementioned support career path. I was loosely learning
bits of Python, javascript, and drips of things like bash and lua. My education taught me C++
and Visual Basic. Visual Basic 6... which was deprecated just as I finished
my education, and who is able to retain any C++ when you don't use it every day?</p>
<p>Anyway, fast-forward to the present day. I'm now a full time
software developer/engineer/(whatever the kids are calling it these days) working within the insolvency sector.</p>
<p>We use mostly Flask in our stack, which is not the worst thing in the world. I've grown to really love python,
and I'm glad I've been able to use it in my career. Since working here, the only other language I've used is Dart.
Boss man said he wanted a phone app, and Flutter was chosen. I don't think I'll use Dart for anything other than
Flutter.</p>
<p>Yeah - so here we are, at the end of probably the worst blog post you've ever read. Oh, the purpose of this blog!</p>
<p>I'm going to be using this blog to document my journey through the world of software development. I plan to put anything
interesting I learn here, no matter how foolish it is. I have plans to document a journey of learning and developing.</p>
<p>The Next post will be what I'm using to build this site. I think you might like it; it's pretty cool. I also plan to
learn
as many languages as I can, and I'll be documenting that here too.</p>
<p><em>A Short Uninteresting Introduction by David Carmichael</em></p>
]]>
            </content:encoded>
        </item>
    </channel>
</rss>